"""
This module provides utilities for making secure HTTP requests using the `requests` library.
It includes custom transport adapters, certificate management, and header/cookie handling with enums.
"""

from typing import Dict, Any, Optional, List, Union
import requests
import ssl
import logging
from datetime import datetime
from .secureRequestsEnums import HeaderKeys, CookieKeys, CookieAttributeKeys
from os.path import exists as PathExists
from os.path import join as PathJoin

class TLSAdapter(requests.adapters.HTTPAdapter):
    def __init__(self, SSLContext: Optional[ssl.SSLContext] = None, **kwargs: Any) -> None: ...
    def init_poolmanager(self, *args: Any, **kwargs: Any) -> None: ...
    def _createSSLContext(self) -> ssl.SSLContext: ...

class SecureRequests:
    session: requests.Session
    headers: Dict[str, str]
    cookies: Dict[str, Dict[str, Union[str, bool, int, datetime]]]
    logger: Optional[logging.Logger]
    verify: Optional[Union[bool, str]]

    def __init__(
        self,
        requests: requests = requests,
        pathExists: PathExists = PathExists,
        pathJoin: PathJoin = PathJoin,
        datetime: datetime = datetime,
        useEnv: bool = False,
        customEnvVars: Optional[Dict[str, str]] = None,
        headers: Optional[Dict[str, str]] = None,
        useTLS: Optional[bool] = None,
        unsafe: Optional[bool] = None,
        certificateNeedFetch: Optional[bool] = None,
        certificateVerifyChecksum: Optional[Union[bool, str]] = None,
        certificateURL: Optional[str] = None,
        certificatePath: Optional[str] = None,
        logToFile: Optional[bool] = None,
        logLevel: int = logging.INFO,
        logPath: str = None,
        logExtensive: bool = None,
        silent: Optional[bool] = None,
        suppressWarnings: Optional[bool] = None,
        session: Optional[requests.Session] = None
    ) -> None: ...
    
    def _logMessage(self, message: str, level: Union[str, int] = "DEBUG", category: str = "") -> None: ...
    def makeRequest(self, url: str, method: str = "GET", headers: Optional[Dict[str, str]] = None, **kwargs: Any) -> requests.Response: ...
    def _logRequest(self, method: str, url: str, response: requests.Response, **kwargs: Any) -> None: ...
    def headerGenerate(self, customHeaders: Optional[Dict[str, Any]] = None) -> Dict[str, str]: ...
    def headerSetKey(self, key: HeaderKeys, value: str) -> None: ...
    def headerRemoveKey(self, key: HeaderKeys) -> None: ...
    def headerUpdateMultiple(self, newHeader: Dict[HeaderKeys, str]) -> None: ...
    def headerRemoveMultiple(self, keys: List[HeaderKeys]) -> None: ...
    def _serializeCookieInfo(self, cookieInfo: Dict[Union[CookieAttributeKeys, str], Union[str, bool, int, datetime]]) -> str: ...
    def _deserializeCookieInfo(self, cookieInfoStr: str) -> Dict[Union[CookieAttributeKeys, str], Union[str, bool, int, datetime]]: ...
    def cookieUpdate(self, key: CookieKeys, cookieInfo: Union[str, Dict[Union[CookieAttributeKeys, str], Union[str, bool, int, datetime]]]) -> None: ...
    def cookieGet(self, key: CookieKeys) -> Optional[Dict[Union[CookieAttributeKeys, str], Union[str, bool, int, datetime]]]: ...
    def cookieRemove(self, key: CookieKeys) -> None: ...
    def cookieUpdateMultiple(self, cookies: Dict[CookieKeys, Dict[Union[CookieAttributeKeys, str], Union[str, bool, int, datetime]]]) -> None: ...
    def cookieGetAll(self) -> Dict[CookieKeys, Dict[Union[CookieAttributeKeys, str], Union[str, bool, int, datetime]]]: ...
    def _certificateFetch(self, force: bool = False, verifyChecksum: Union[bool, str] = False) -> None: ...
    def _certificateSet(self) -> Union[bool, str]: ...